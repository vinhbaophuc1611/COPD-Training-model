{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":267422,"sourceType":"datasetVersion","datasetId":110374},{"sourceId":10006453,"sourceType":"datasetVersion","datasetId":6159765},{"sourceId":43294013,"sourceType":"kernelVersion"},{"sourceId":43354304,"sourceType":"kernelVersion"},{"sourceId":46138711,"sourceType":"kernelVersion"},{"sourceId":46182849,"sourceType":"kernelVersion"}],"dockerImageVersionId":30804,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install torch panns-inference\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Input, LSTM, Dense, Conv1D, MaxPooling1D, Dropout, Reshape\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score, roc_auc_score, f1_score\nfrom sklearn.model_selection import StratifiedKFold\nimport librosa as lb\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Load Data\ntrain = pd.read_csv('../input/part-2-handel-imbalance-creating-spectrogram/train.csv')\nval = pd.read_csv('../input/part-2-handel-imbalance-creating-spectrogram/val.csv')\nytrain = train['disease']\nyval = val['disease']\n\n# Label Encoding\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nytrain = le.fit_transform(ytrain).astype(np.int64)\nyval = le.transform(yval).astype(np.int64)\n\n# Data Augmentation Function\ndef augment_audio(waveform, sr):\n    \"\"\"Apply basic audio augmentations.\"\"\"\n    waveforms = [\n        waveform,\n        lb.effects.pitch_shift(waveform, sr=sr, n_steps=2),\n        lb.effects.time_stretch(waveform, rate=0.8),\n        lb.effects.time_stretch(waveform, rate=1.2),\n        waveform + 0.005 * np.random.randn(len(waveform))  # Add Gaussian noise\n    ]\n    return waveforms\n\n# Extract MFCCs as Features\ndef extract_features(audio_path, augment=True):\n    waveform, sr = lb.load(audio_path, sr=16000, mono=True)\n    if augment:\n        waveforms = augment_audio(waveform, sr)\n    else:\n        waveforms = [waveform]\n    \n    features = []\n    for wf in waveforms:\n        mfcc = lb.feature.mfcc(y=wf, sr=sr, n_mfcc=40)\n        features.append(np.mean(mfcc, axis=1))  # Aggregate MFCCs\n    return features\n\n# Process Dataset\nroot = '../input/part-1-preprocessing/processed_audio_files/'\ndef process_data(data, augment=True):\n    features, labels = [], []\n    for _, row in data.iterrows():\n        path = root + row['filename']\n        mfcc_features = extract_features(path, augment)\n        features.extend(mfcc_features)\n        labels.extend([row['disease']] * len(mfcc_features))\n    return np.array(features, dtype=np.float32), np.array(labels)\n\n# Extract features for train and validation\nX_train, y_train = process_data(train, augment=True)\nX_val, y_val = process_data(val, augment=False)\n\n# Class Weights for Imbalanced Data\nfrom sklearn.utils.class_weight import compute_class_weight\nclass_weights = compute_class_weight(\n    class_weight=\"balanced\",\n    classes=np.unique(y_train),\n    y=y_train\n)\nclass_weights_dict = {i: np.float32(weight) for i, weight in enumerate(class_weights)}\n\n# CNN-LSTM Model\ndef create_cnn_lstm_model(input_dim):\n    inputs = Input(shape=(input_dim,))\n    x = Reshape((input_dim, 1))(inputs)  # Add channel dimension\n    x = Conv1D(64, kernel_size=3, activation='relu')(x)\n    x = MaxPooling1D(pool_size=2)(x)\n    x = LSTM(128, return_sequences=False, dropout=0.3)(x)\n    x = Dense(64, activation='relu')(x)\n    outputs = Dense(len(np.unique(y_train)), activation='softmax')(x)\n    model = Model(inputs, outputs)\n    model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n    return model\n\n# K-Fold Cross Validation\nn_splits = 5\nskf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=42)\nfold_no = 1\nresults = []\n\nfor train_index, val_index in skf.split(X_train, y_train):\n    print(f\"\\n========== Starting Fold {fold_no}/{n_splits} ==========\")\n    \n    # Split Data\n    X_fold_train, X_fold_val = X_train[train_index], X_train[val_index]\n    y_fold_train, y_fold_val = y_train[train_index], y_train[val_index]\n\n    # Encode labels to integers\n    y_fold_train = le.transform(y_fold_train).astype(np.int64) \n    y_fold_val = le.transform(y_fold_val).astype(np.int64) \n\n    # Build Model\n    model = create_cnn_lstm_model(X_train.shape[1])\n    \n    # Callbacks\n    callbacks = [\n        tf.keras.callbacks.EarlyStopping(patience=10, restore_best_weights=True, verbose=1),\n        tf.keras.callbacks.ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=5, min_lr=1e-5, verbose=1)\n    ]\n    \n    # Train Model\n    history = model.fit(\n        X_fold_train, y_fold_train,\n        validation_data=(X_fold_val, y_fold_val),\n        epochs=50,\n        batch_size=32,\n        class_weight=class_weights_dict,\n        callbacks=callbacks,\n        verbose=1\n    )\n    \n    # Evaluate Model\n    predictions = np.argmax(model.predict(X_fold_val), axis=1)\n    acc = accuracy_score(y_fold_val, predictions)\n    f1 = f1_score(y_fold_val, predictions, average='weighted')\n    auc = roc_auc_score(y_fold_val, model.predict(X_fold_val), multi_class='ovr')\n    report = classification_report(y_fold_val, predictions, target_names=le.classes_)\n    conf_matrix = confusion_matrix(y_fold_val, predictions)\n    \n    print(f\"Fold {fold_no} - Accuracy: {acc * 100:.2f}% - F1-Score: {f1:.4f} - AUC: {auc:.4f}\")\n    print(\"Classification Report:\\n\", report)\n    print(\"Confusion Matrix:\\n\", conf_matrix)\n    \n    # Append Results\n    results.append(acc * 100)\n    fold_no += 1\n\n# Evaluate on Held-Out Validation Set\nfinal_predictions = np.argmax(model.predict(X_val), axis=1)\nfinal_acc = accuracy_score(yval, final_predictions)\nfinal_f1 = f1_score(yval, final_predictions, average='weighted')\nfinal_auc = roc_auc_score(yval, model.predict(X_val), multi_class='ovr')\n\n# Final Metrics\nprint(\"\\n================= Final Evaluation =================\")\nprint(f\"Validation Accuracy: {final_acc * 100:.2f}%\")\nprint(f\"Validation F1-Score: {final_f1:.4f}\")\nprint(f\"Validation AUC: {final_auc:.4f}\")\n\n# Plot Confusion Matrix for Validation Set\nconf_matrix_val = confusion_matrix(yval, final_predictions)\nplt.figure(figsize=(8, 6))\nsns.heatmap(conf_matrix_val, annot=True, fmt=\"d\", cmap=\"Blues\", xticklabels=le.classes_, yticklabels=le.classes_)\nplt.title('Validation Set Confusion Matrix')\nplt.xlabel('Predicted Labels')\nplt.ylabel('True Labels')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-28T03:46:42.996951Z","iopub.execute_input":"2024-12-28T03:46:42.997347Z","iopub.status.idle":"2024-12-28T05:25:21.422603Z","shell.execute_reply.started":"2024-12-28T03:46:42.997282Z","shell.execute_reply":"2024-12-28T05:25:21.421579Z"}},"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/pty.py:89: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  pid, fd = os.forkpty()\n","output_type":"stream"},{"name":"stdout","text":"Requirement already satisfied: torch in /opt/conda/lib/python3.10/site-packages (2.4.0)\nRequirement already satisfied: panns-inference in /opt/conda/lib/python3.10/site-packages (0.1.1)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from torch) (3.15.1)\nRequirement already satisfied: typing-extensions>=4.8.0 in /opt/conda/lib/python3.10/site-packages (from torch) (4.12.2)\nRequirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch) (1.13.3)\nRequirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch) (3.3)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch) (3.1.4)\nRequirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch) (2024.6.0)\nRequirement already satisfied: matplotlib in /opt/conda/lib/python3.10/site-packages (from panns-inference) (3.7.5)\nRequirement already satisfied: librosa in /opt/conda/lib/python3.10/site-packages (from panns-inference) (0.10.2.post1)\nRequirement already satisfied: torchlibrosa in /opt/conda/lib/python3.10/site-packages (from panns-inference) (0.1.0)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch) (2.1.5)\nRequirement already satisfied: audioread>=2.1.9 in /opt/conda/lib/python3.10/site-packages (from librosa->panns-inference) (3.0.1)\nRequirement already satisfied: numpy!=1.22.0,!=1.22.1,!=1.22.2,>=1.20.3 in /opt/conda/lib/python3.10/site-packages (from librosa->panns-inference) (1.26.4)\nRequirement already satisfied: scipy>=1.2.0 in /opt/conda/lib/python3.10/site-packages (from librosa->panns-inference) (1.14.1)\nRequirement already satisfied: scikit-learn>=0.20.0 in /opt/conda/lib/python3.10/site-packages (from librosa->panns-inference) (1.2.2)\nRequirement already satisfied: joblib>=0.14 in /opt/conda/lib/python3.10/site-packages (from librosa->panns-inference) (1.4.2)\nRequirement already satisfied: decorator>=4.3.0 in /opt/conda/lib/python3.10/site-packages (from librosa->panns-inference) (5.1.1)\nRequirement already satisfied: numba>=0.51.0 in /opt/conda/lib/python3.10/site-packages (from librosa->panns-inference) (0.60.0)\nRequirement already satisfied: soundfile>=0.12.1 in /opt/conda/lib/python3.10/site-packages (from librosa->panns-inference) (0.12.1)\nRequirement already satisfied: pooch>=1.1 in /opt/conda/lib/python3.10/site-packages (from librosa->panns-inference) (1.8.2)\nRequirement already satisfied: soxr>=0.3.2 in /opt/conda/lib/python3.10/site-packages (from librosa->panns-inference) (0.5.0.post1)\nRequirement already satisfied: lazy-loader>=0.1 in /opt/conda/lib/python3.10/site-packages (from librosa->panns-inference) (0.4)\nRequirement already satisfied: msgpack>=1.0 in /opt/conda/lib/python3.10/site-packages (from librosa->panns-inference) (1.0.8)\nRequirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib->panns-inference) (1.2.1)\nRequirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib->panns-inference) (0.12.1)\nRequirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib->panns-inference) (4.53.0)\nRequirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib->panns-inference) (1.4.5)\nRequirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib->panns-inference) (21.3)\nRequirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib->panns-inference) (10.3.0)\nRequirement already satisfied: pyparsing>=2.3.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib->panns-inference) (3.1.2)\nRequirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.10/site-packages (from matplotlib->panns-inference) (2.9.0.post0)\nRequirement already satisfied: mpmath<1.4,>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from sympy->torch) (1.3.0)\nRequirement already satisfied: llvmlite<0.44,>=0.43.0dev0 in /opt/conda/lib/python3.10/site-packages (from numba>=0.51.0->librosa->panns-inference) (0.43.0)\nRequirement already satisfied: platformdirs>=2.5.0 in /opt/conda/lib/python3.10/site-packages (from pooch>=1.1->librosa->panns-inference) (3.11.0)\nRequirement already satisfied: requests>=2.19.0 in /opt/conda/lib/python3.10/site-packages (from pooch>=1.1->librosa->panns-inference) (2.32.3)\nRequirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.7->matplotlib->panns-inference) (1.16.0)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn>=0.20.0->librosa->panns-inference) (3.5.0)\nRequirement already satisfied: cffi>=1.0 in /opt/conda/lib/python3.10/site-packages (from soundfile>=0.12.1->librosa->panns-inference) (1.16.0)\nRequirement already satisfied: pycparser in /opt/conda/lib/python3.10/site-packages (from cffi>=1.0->soundfile>=0.12.1->librosa->panns-inference) (2.22)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->pooch>=1.1->librosa->panns-inference) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->pooch>=1.1->librosa->panns-inference) (3.7)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->pooch>=1.1->librosa->panns-inference) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->pooch>=1.1->librosa->panns-inference) (2024.6.2)\n\n========== Starting Fold 1/5 ==========\nEpoch 1/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 28ms/step - accuracy: 0.3407 - loss: 2.0975 - val_accuracy: 0.2461 - val_loss: 1.7537 - learning_rate: 0.0010\nEpoch 2/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 28ms/step - accuracy: 0.2178 - loss: 1.6869 - val_accuracy: 0.2418 - val_loss: 1.5109 - learning_rate: 0.0010\nEpoch 3/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 29ms/step - accuracy: 0.2523 - loss: 1.4882 - val_accuracy: 0.2310 - val_loss: 1.9115 - learning_rate: 0.0010\nEpoch 4/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 28ms/step - accuracy: 0.3763 - loss: 1.3375 - val_accuracy: 0.4951 - val_loss: 1.3536 - learning_rate: 0.0010\nEpoch 5/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.4652 - loss: 1.2641 - val_accuracy: 0.5693 - val_loss: 1.1645 - learning_rate: 0.0010\nEpoch 6/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 28ms/step - accuracy: 0.5106 - loss: 1.1451 - val_accuracy: 0.4688 - val_loss: 1.3867 - learning_rate: 0.0010\nEpoch 7/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.5241 - loss: 1.1477 - val_accuracy: 0.5216 - val_loss: 1.2673 - learning_rate: 0.0010\nEpoch 8/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.5754 - loss: 1.0015 - val_accuracy: 0.5105 - val_loss: 1.2698 - learning_rate: 0.0010\nEpoch 9/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.5891 - loss: 0.9352 - val_accuracy: 0.6924 - val_loss: 0.9019 - learning_rate: 0.0010\nEpoch 10/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.5944 - loss: 1.0063 - val_accuracy: 0.7557 - val_loss: 0.6770 - learning_rate: 0.0010\nEpoch 11/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.6269 - loss: 0.9176 - val_accuracy: 0.6905 - val_loss: 0.8197 - learning_rate: 0.0010\nEpoch 12/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.6049 - loss: 0.9759 - val_accuracy: 0.7185 - val_loss: 0.7780 - learning_rate: 0.0010\nEpoch 13/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.6555 - loss: 0.7855 - val_accuracy: 0.6546 - val_loss: 0.9399 - learning_rate: 0.0010\nEpoch 14/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.6704 - loss: 0.7824 - val_accuracy: 0.7340 - val_loss: 0.6987 - learning_rate: 0.0010\nEpoch 15/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 27ms/step - accuracy: 0.6869 - loss: 0.7707\nEpoch 15: ReduceLROnPlateau reducing learning rate to 0.00010000000474974513.\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.6869 - loss: 0.7706 - val_accuracy: 0.7205 - val_loss: 0.7253 - learning_rate: 0.0010\nEpoch 16/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7170 - loss: 0.6616 - val_accuracy: 0.7313 - val_loss: 0.7311 - learning_rate: 1.0000e-04\nEpoch 17/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7300 - loss: 0.5906 - val_accuracy: 0.7299 - val_loss: 0.7241 - learning_rate: 1.0000e-04\nEpoch 18/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7406 - loss: 0.5340 - val_accuracy: 0.7506 - val_loss: 0.6794 - learning_rate: 1.0000e-04\nEpoch 19/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7391 - loss: 0.5263 - val_accuracy: 0.7431 - val_loss: 0.6995 - learning_rate: 1.0000e-04\nEpoch 20/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7464 - loss: 0.5357 - val_accuracy: 0.7630 - val_loss: 0.6506 - learning_rate: 1.0000e-04\nEpoch 21/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7404 - loss: 0.5217 - val_accuracy: 0.7582 - val_loss: 0.6577 - learning_rate: 1.0000e-04\nEpoch 22/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7586 - loss: 0.5088 - val_accuracy: 0.7624 - val_loss: 0.6490 - learning_rate: 1.0000e-04\nEpoch 23/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7599 - loss: 0.4796 - val_accuracy: 0.7702 - val_loss: 0.6251 - learning_rate: 1.0000e-04\nEpoch 24/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.7729 - loss: 0.4602 - val_accuracy: 0.7709 - val_loss: 0.6215 - learning_rate: 1.0000e-04\nEpoch 25/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.7652 - loss: 0.4668 - val_accuracy: 0.7667 - val_loss: 0.6325 - learning_rate: 1.0000e-04\nEpoch 26/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7721 - loss: 0.4434 - val_accuracy: 0.7709 - val_loss: 0.6155 - learning_rate: 1.0000e-04\nEpoch 27/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.7746 - loss: 0.4411 - val_accuracy: 0.7703 - val_loss: 0.6242 - learning_rate: 1.0000e-04\nEpoch 28/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7730 - loss: 0.4354 - val_accuracy: 0.7702 - val_loss: 0.6171 - learning_rate: 1.0000e-04\nEpoch 29/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.7697 - loss: 0.4360 - val_accuracy: 0.7618 - val_loss: 0.6629 - learning_rate: 1.0000e-04\nEpoch 30/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.7819 - loss: 0.4307 - val_accuracy: 0.7725 - val_loss: 0.6152 - learning_rate: 1.0000e-04\nEpoch 31/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7791 - loss: 0.4175 - val_accuracy: 0.7806 - val_loss: 0.6002 - learning_rate: 1.0000e-04\nEpoch 32/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.7888 - loss: 0.4331 - val_accuracy: 0.7725 - val_loss: 0.6298 - learning_rate: 1.0000e-04\nEpoch 33/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7840 - loss: 0.4068 - val_accuracy: 0.7713 - val_loss: 0.6217 - learning_rate: 1.0000e-04\nEpoch 34/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.7821 - loss: 0.4169 - val_accuracy: 0.7932 - val_loss: 0.5608 - learning_rate: 1.0000e-04\nEpoch 35/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7939 - loss: 0.3795 - val_accuracy: 0.7721 - val_loss: 0.6368 - learning_rate: 1.0000e-04\nEpoch 36/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7852 - loss: 0.4058 - val_accuracy: 0.7856 - val_loss: 0.5771 - learning_rate: 1.0000e-04\nEpoch 37/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.8001 - loss: 0.3870 - val_accuracy: 0.7945 - val_loss: 0.5675 - learning_rate: 1.0000e-04\nEpoch 38/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7984 - loss: 0.3792 - val_accuracy: 0.7986 - val_loss: 0.5506 - learning_rate: 1.0000e-04\nEpoch 39/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8021 - loss: 0.3613 - val_accuracy: 0.8001 - val_loss: 0.5612 - learning_rate: 1.0000e-04\nEpoch 40/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8053 - loss: 0.3566 - val_accuracy: 0.7978 - val_loss: 0.5609 - learning_rate: 1.0000e-04\nEpoch 41/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7999 - loss: 0.3850 - val_accuracy: 0.8036 - val_loss: 0.5406 - learning_rate: 1.0000e-04\nEpoch 42/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.8059 - loss: 0.3650 - val_accuracy: 0.7964 - val_loss: 0.5631 - learning_rate: 1.0000e-04\nEpoch 43/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.8123 - loss: 0.3386 - val_accuracy: 0.8022 - val_loss: 0.5528 - learning_rate: 1.0000e-04\nEpoch 44/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8113 - loss: 0.3467 - val_accuracy: 0.8133 - val_loss: 0.5140 - learning_rate: 1.0000e-04\nEpoch 45/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8124 - loss: 0.3503 - val_accuracy: 0.8107 - val_loss: 0.5244 - learning_rate: 1.0000e-04\nEpoch 46/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8086 - loss: 0.3443 - val_accuracy: 0.7899 - val_loss: 0.5933 - learning_rate: 1.0000e-04\nEpoch 47/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8101 - loss: 0.3250 - val_accuracy: 0.8142 - val_loss: 0.5070 - learning_rate: 1.0000e-04\nEpoch 48/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8151 - loss: 0.3199 - val_accuracy: 0.7966 - val_loss: 0.5759 - learning_rate: 1.0000e-04\nEpoch 49/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8175 - loss: 0.3164 - val_accuracy: 0.8053 - val_loss: 0.5319 - learning_rate: 1.0000e-04\nEpoch 50/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8212 - loss: 0.2987 - val_accuracy: 0.8082 - val_loss: 0.5294 - learning_rate: 1.0000e-04\nRestoring model weights from the end of the best epoch: 47.\n\u001b[1m162/162\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 9ms/step\n\u001b[1m162/162\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step\nFold 1 - Accuracy: 81.42% - F1-Score: 0.8396 - AUC: 0.9820\nClassification Report:\n                 precision    recall  f1-score   support\n\n        Asthma       0.33      1.00      0.50         5\nBronchiectasis       0.34      0.96      0.51        78\n Bronchiolitis       0.40      0.80      0.53       120\n          COPD       0.99      0.81      0.89      4309\n       Healthy       0.48      0.78      0.60       241\n          LRTI       0.40      0.88      0.55        24\n     Pneumonia       0.43      0.91      0.59       214\n          URTI       0.46      0.71      0.56       182\n\n      accuracy                           0.81      5173\n     macro avg       0.48      0.86      0.59      5173\n  weighted avg       0.90      0.81      0.84      5173\n\nConfusion Matrix:\n [[   5    0    0    0    0    0    0    0]\n [   0   75    1    1    0    0    0    1]\n [   0    0   96    4    5    1    2   12]\n [   8  140  119 3503  174   14  237  114]\n [   2    3   10    4  188    7    7   20]\n [   0    0    0    0    0   21    0    3]\n [   0    1    6    5    4    1  194    3]\n [   0    0   10    8   19    9    6  130]]\n\n========== Starting Fold 2/5 ==========\nEpoch 1/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 29ms/step - accuracy: 0.1974 - loss: 1.9862 - val_accuracy: 0.1591 - val_loss: 1.7348 - learning_rate: 0.0010\nEpoch 2/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.2160 - loss: 1.5461 - val_accuracy: 0.2010 - val_loss: 1.8397 - learning_rate: 0.0010\nEpoch 3/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.2716 - loss: 1.4264 - val_accuracy: 0.3437 - val_loss: 1.5464 - learning_rate: 0.0010\nEpoch 4/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.3789 - loss: 1.3483 - val_accuracy: 0.5386 - val_loss: 1.1748 - learning_rate: 0.0010\nEpoch 5/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.4717 - loss: 1.2362 - val_accuracy: 0.3321 - val_loss: 1.8044 - learning_rate: 0.0010\nEpoch 6/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.4983 - loss: 1.1939 - val_accuracy: 0.5678 - val_loss: 1.1577 - learning_rate: 0.0010\nEpoch 7/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.5988 - loss: 1.0342 - val_accuracy: 0.6890 - val_loss: 0.8749 - learning_rate: 0.0010\nEpoch 8/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.5994 - loss: 1.0960 - val_accuracy: 0.6470 - val_loss: 0.9998 - learning_rate: 0.0010\nEpoch 9/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.6504 - loss: 0.9040 - val_accuracy: 0.7038 - val_loss: 0.8511 - learning_rate: 0.0010\nEpoch 10/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.6626 - loss: 0.8041 - val_accuracy: 0.6594 - val_loss: 0.9234 - learning_rate: 0.0010\nEpoch 11/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.6651 - loss: 0.8061 - val_accuracy: 0.6267 - val_loss: 1.1161 - learning_rate: 0.0010\nEpoch 12/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.6935 - loss: 0.7314 - val_accuracy: 0.6704 - val_loss: 0.9145 - learning_rate: 0.0010\nEpoch 13/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.6974 - loss: 0.7160 - val_accuracy: 0.7752 - val_loss: 0.6256 - learning_rate: 0.0010\nEpoch 14/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7239 - loss: 0.6762 - val_accuracy: 0.7286 - val_loss: 0.7020 - learning_rate: 0.0010\nEpoch 15/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7132 - loss: 0.7490 - val_accuracy: 0.7703 - val_loss: 0.6152 - learning_rate: 0.0010\nEpoch 16/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7236 - loss: 0.6885 - val_accuracy: 0.7330 - val_loss: 0.7338 - learning_rate: 0.0010\nEpoch 17/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7468 - loss: 0.6302 - val_accuracy: 0.7408 - val_loss: 0.7021 - learning_rate: 0.0010\nEpoch 18/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7439 - loss: 0.5830 - val_accuracy: 0.7557 - val_loss: 0.6931 - learning_rate: 0.0010\nEpoch 19/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7265 - loss: 0.6910 - val_accuracy: 0.7560 - val_loss: 0.6595 - learning_rate: 0.0010\nEpoch 20/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 26ms/step - accuracy: 0.7548 - loss: 0.5467\nEpoch 20: ReduceLROnPlateau reducing learning rate to 0.00010000000474974513.\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 29ms/step - accuracy: 0.7548 - loss: 0.5467 - val_accuracy: 0.7655 - val_loss: 0.6282 - learning_rate: 0.0010\nEpoch 21/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7649 - loss: 0.4711 - val_accuracy: 0.7901 - val_loss: 0.5625 - learning_rate: 1.0000e-04\nEpoch 22/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7864 - loss: 0.4508 - val_accuracy: 0.8036 - val_loss: 0.5340 - learning_rate: 1.0000e-04\nEpoch 23/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7932 - loss: 0.4205 - val_accuracy: 0.8026 - val_loss: 0.5358 - learning_rate: 1.0000e-04\nEpoch 24/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7894 - loss: 0.4241 - val_accuracy: 0.7962 - val_loss: 0.5666 - learning_rate: 1.0000e-04\nEpoch 25/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8037 - loss: 0.3862 - val_accuracy: 0.8034 - val_loss: 0.5302 - learning_rate: 1.0000e-04\nEpoch 26/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8071 - loss: 0.3697 - val_accuracy: 0.8044 - val_loss: 0.5400 - learning_rate: 1.0000e-04\nEpoch 27/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8052 - loss: 0.3815 - val_accuracy: 0.8187 - val_loss: 0.4915 - learning_rate: 1.0000e-04\nEpoch 28/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8146 - loss: 0.3483 - val_accuracy: 0.8237 - val_loss: 0.4774 - learning_rate: 1.0000e-04\nEpoch 29/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8111 - loss: 0.3935 - val_accuracy: 0.8165 - val_loss: 0.4951 - learning_rate: 1.0000e-04\nEpoch 30/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8104 - loss: 0.3636 - val_accuracy: 0.8181 - val_loss: 0.5006 - learning_rate: 1.0000e-04\nEpoch 31/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8156 - loss: 0.3531 - val_accuracy: 0.8117 - val_loss: 0.5144 - learning_rate: 1.0000e-04\nEpoch 32/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8130 - loss: 0.3534 - val_accuracy: 0.8216 - val_loss: 0.4807 - learning_rate: 1.0000e-04\nEpoch 33/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8226 - loss: 0.3150 - val_accuracy: 0.8274 - val_loss: 0.4714 - learning_rate: 1.0000e-04\nEpoch 34/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8310 - loss: 0.3264 - val_accuracy: 0.8260 - val_loss: 0.4692 - learning_rate: 1.0000e-04\nEpoch 35/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8263 - loss: 0.3196 - val_accuracy: 0.8310 - val_loss: 0.4645 - learning_rate: 1.0000e-04\nEpoch 36/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8249 - loss: 0.3159 - val_accuracy: 0.8245 - val_loss: 0.4822 - learning_rate: 1.0000e-04\nEpoch 37/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 29ms/step - accuracy: 0.8345 - loss: 0.2992 - val_accuracy: 0.8193 - val_loss: 0.5085 - learning_rate: 1.0000e-04\nEpoch 38/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8324 - loss: 0.3134 - val_accuracy: 0.8285 - val_loss: 0.4655 - learning_rate: 1.0000e-04\nEpoch 39/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8351 - loss: 0.2937 - val_accuracy: 0.8198 - val_loss: 0.5048 - learning_rate: 1.0000e-04\nEpoch 40/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8260 - loss: 0.3027 - val_accuracy: 0.8343 - val_loss: 0.4473 - learning_rate: 1.0000e-04\nEpoch 41/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8355 - loss: 0.2862 - val_accuracy: 0.8320 - val_loss: 0.4529 - learning_rate: 1.0000e-04\nEpoch 42/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8354 - loss: 0.2779 - val_accuracy: 0.8361 - val_loss: 0.4344 - learning_rate: 1.0000e-04\nEpoch 43/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8422 - loss: 0.2804 - val_accuracy: 0.8380 - val_loss: 0.4429 - learning_rate: 1.0000e-04\nEpoch 44/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8437 - loss: 0.2675 - val_accuracy: 0.8397 - val_loss: 0.4400 - learning_rate: 1.0000e-04\nEpoch 45/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8395 - loss: 0.3189 - val_accuracy: 0.8361 - val_loss: 0.4536 - learning_rate: 1.0000e-04\nEpoch 46/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8378 - loss: 0.2721 - val_accuracy: 0.8332 - val_loss: 0.4608 - learning_rate: 1.0000e-04\nEpoch 47/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 27ms/step - accuracy: 0.8445 - loss: 0.2548\nEpoch 47: ReduceLROnPlateau reducing learning rate to 1.0000000474974514e-05.\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8445 - loss: 0.2548 - val_accuracy: 0.8324 - val_loss: 0.4590 - learning_rate: 1.0000e-04\nEpoch 48/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8408 - loss: 0.2549 - val_accuracy: 0.8378 - val_loss: 0.4446 - learning_rate: 1.0000e-05\nEpoch 49/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8432 - loss: 0.2541 - val_accuracy: 0.8430 - val_loss: 0.4291 - learning_rate: 1.0000e-05\nEpoch 50/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8459 - loss: 0.2610 - val_accuracy: 0.8438 - val_loss: 0.4272 - learning_rate: 1.0000e-05\nRestoring model weights from the end of the best epoch: 50.\n\u001b[1m162/162\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 9ms/step\n\u001b[1m162/162\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step\nFold 2 - Accuracy: 84.38% - F1-Score: 0.8630 - AUC: 0.9843\nClassification Report:\n                 precision    recall  f1-score   support\n\n        Asthma       0.26      1.00      0.42         5\nBronchiectasis       0.45      0.91      0.60        78\n Bronchiolitis       0.48      0.75      0.58       120\n          COPD       0.99      0.85      0.92      4309\n       Healthy       0.44      0.80      0.57       241\n          LRTI       0.43      0.92      0.59        24\n     Pneumonia       0.53      0.89      0.67       214\n          URTI       0.48      0.70      0.57       182\n\n      accuracy                           0.84      5173\n     macro avg       0.51      0.85      0.61      5173\n  weighted avg       0.91      0.84      0.86      5173\n\nConfusion Matrix:\n [[   5    0    0    0    0    0    0    0]\n [   0   71    3    2    2    0    0    0]\n [   0    2   90    5   10    1    4    8]\n [  10   83   68 3667  199   14  153  115]\n [   0    0   10   12  193    9    5   12]\n [   0    0    1    0    1   22    0    0]\n [   0    0    2    5   10    2  190    5]\n [   4    2   14    2   26    3    4  127]]\n\n========== Starting Fold 3/5 ==========\nEpoch 1/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 30ms/step - accuracy: 0.2214 - loss: 1.9923 - val_accuracy: 0.1046 - val_loss: 1.9832 - learning_rate: 0.0010\nEpoch 2/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.2264 - loss: 1.6230 - val_accuracy: 0.2534 - val_loss: 1.6904 - learning_rate: 0.0010\nEpoch 3/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 30ms/step - accuracy: 0.2714 - loss: 1.4994 - val_accuracy: 0.4928 - val_loss: 1.3312 - learning_rate: 0.0010\nEpoch 4/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.4069 - loss: 1.3838 - val_accuracy: 0.3238 - val_loss: 1.6826 - learning_rate: 0.0010\nEpoch 5/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.4157 - loss: 1.3207 - val_accuracy: 0.3685 - val_loss: 1.5918 - learning_rate: 0.0010\nEpoch 6/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.4878 - loss: 1.1089 - val_accuracy: 0.6037 - val_loss: 1.0941 - learning_rate: 0.0010\nEpoch 7/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.5303 - loss: 1.0920 - val_accuracy: 0.5386 - val_loss: 1.2469 - learning_rate: 0.0010\nEpoch 8/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 31ms/step - accuracy: 0.5888 - loss: 0.9723 - val_accuracy: 0.5488 - val_loss: 1.1783 - learning_rate: 0.0010\nEpoch 9/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 30ms/step - accuracy: 0.6071 - loss: 0.9536 - val_accuracy: 0.7100 - val_loss: 0.8139 - learning_rate: 0.0010\nEpoch 10/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.6269 - loss: 0.9246 - val_accuracy: 0.7096 - val_loss: 0.7918 - learning_rate: 0.0010\nEpoch 11/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.6468 - loss: 0.8483 - val_accuracy: 0.6360 - val_loss: 1.0555 - learning_rate: 0.0010\nEpoch 12/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.6616 - loss: 0.8334 - val_accuracy: 0.7282 - val_loss: 0.7667 - learning_rate: 0.0010\nEpoch 13/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.6534 - loss: 0.8312 - val_accuracy: 0.6893 - val_loss: 0.8265 - learning_rate: 0.0010\nEpoch 14/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.6773 - loss: 0.7465 - val_accuracy: 0.6547 - val_loss: 0.9731 - learning_rate: 0.0010\nEpoch 15/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7047 - loss: 0.6913 - val_accuracy: 0.7462 - val_loss: 0.7020 - learning_rate: 0.0010\nEpoch 16/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.6943 - loss: 0.7093 - val_accuracy: 0.7133 - val_loss: 0.8167 - learning_rate: 0.0010\nEpoch 17/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7108 - loss: 0.6499 - val_accuracy: 0.7153 - val_loss: 0.7960 - learning_rate: 0.0010\nEpoch 18/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7295 - loss: 0.5987 - val_accuracy: 0.6546 - val_loss: 0.8993 - learning_rate: 0.0010\nEpoch 19/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7169 - loss: 0.5949 - val_accuracy: 0.7160 - val_loss: 0.7507 - learning_rate: 0.0010\nEpoch 20/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 27ms/step - accuracy: 0.7363 - loss: 0.6537\nEpoch 20: ReduceLROnPlateau reducing learning rate to 0.00010000000474974513.\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7363 - loss: 0.6537 - val_accuracy: 0.6957 - val_loss: 0.8251 - learning_rate: 0.0010\nEpoch 21/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 29ms/step - accuracy: 0.7357 - loss: 0.5231 - val_accuracy: 0.7676 - val_loss: 0.6309 - learning_rate: 1.0000e-04\nEpoch 22/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7724 - loss: 0.4497 - val_accuracy: 0.7814 - val_loss: 0.5945 - learning_rate: 1.0000e-04\nEpoch 23/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 29ms/step - accuracy: 0.7832 - loss: 0.4534 - val_accuracy: 0.7798 - val_loss: 0.5877 - learning_rate: 1.0000e-04\nEpoch 24/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 28ms/step - accuracy: 0.7897 - loss: 0.4106 - val_accuracy: 0.7988 - val_loss: 0.5337 - learning_rate: 1.0000e-04\nEpoch 25/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7934 - loss: 0.4033 - val_accuracy: 0.7879 - val_loss: 0.5734 - learning_rate: 1.0000e-04\nEpoch 26/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 28ms/step - accuracy: 0.7997 - loss: 0.4182 - val_accuracy: 0.7941 - val_loss: 0.5541 - learning_rate: 1.0000e-04\nEpoch 27/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7999 - loss: 0.3956 - val_accuracy: 0.7939 - val_loss: 0.5476 - learning_rate: 1.0000e-04\nEpoch 28/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8002 - loss: 0.3837 - val_accuracy: 0.8001 - val_loss: 0.5290 - learning_rate: 1.0000e-04\nEpoch 29/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8046 - loss: 0.3661 - val_accuracy: 0.8158 - val_loss: 0.4895 - learning_rate: 1.0000e-04\nEpoch 30/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8209 - loss: 0.3535 - val_accuracy: 0.8158 - val_loss: 0.4959 - learning_rate: 1.0000e-04\nEpoch 31/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8106 - loss: 0.3547 - val_accuracy: 0.8048 - val_loss: 0.5264 - learning_rate: 1.0000e-04\nEpoch 32/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.8165 - loss: 0.3535 - val_accuracy: 0.8193 - val_loss: 0.4931 - learning_rate: 1.0000e-04\nEpoch 33/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8218 - loss: 0.3243 - val_accuracy: 0.8009 - val_loss: 0.5329 - learning_rate: 1.0000e-04\nEpoch 34/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8142 - loss: 0.3401 - val_accuracy: 0.8173 - val_loss: 0.4883 - learning_rate: 1.0000e-04\nEpoch 35/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8170 - loss: 0.3440 - val_accuracy: 0.8187 - val_loss: 0.4873 - learning_rate: 1.0000e-04\nEpoch 36/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8205 - loss: 0.3287 - val_accuracy: 0.8198 - val_loss: 0.4922 - learning_rate: 1.0000e-04\nEpoch 37/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8268 - loss: 0.3293 - val_accuracy: 0.8177 - val_loss: 0.4862 - learning_rate: 1.0000e-04\nEpoch 38/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8292 - loss: 0.3299 - val_accuracy: 0.8198 - val_loss: 0.4884 - learning_rate: 1.0000e-04\nEpoch 39/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8331 - loss: 0.3052 - val_accuracy: 0.8243 - val_loss: 0.4848 - learning_rate: 1.0000e-04\nEpoch 40/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8288 - loss: 0.3036 - val_accuracy: 0.8063 - val_loss: 0.5390 - learning_rate: 1.0000e-04\nEpoch 41/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.8295 - loss: 0.2974 - val_accuracy: 0.8222 - val_loss: 0.4777 - learning_rate: 1.0000e-04\nEpoch 42/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8339 - loss: 0.2881 - val_accuracy: 0.8278 - val_loss: 0.4691 - learning_rate: 1.0000e-04\nEpoch 43/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8420 - loss: 0.2784 - val_accuracy: 0.8363 - val_loss: 0.4526 - learning_rate: 1.0000e-04\nEpoch 44/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8433 - loss: 0.2783 - val_accuracy: 0.8324 - val_loss: 0.4634 - learning_rate: 1.0000e-04\nEpoch 45/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8392 - loss: 0.2877 - val_accuracy: 0.8252 - val_loss: 0.4709 - learning_rate: 1.0000e-04\nEpoch 46/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.8448 - loss: 0.2790 - val_accuracy: 0.8301 - val_loss: 0.4628 - learning_rate: 1.0000e-04\nEpoch 47/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8404 - loss: 0.2739 - val_accuracy: 0.8235 - val_loss: 0.4898 - learning_rate: 1.0000e-04\nEpoch 48/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8421 - loss: 0.2624 - val_accuracy: 0.8454 - val_loss: 0.4337 - learning_rate: 1.0000e-04\nEpoch 49/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8445 - loss: 0.2497 - val_accuracy: 0.8426 - val_loss: 0.4395 - learning_rate: 1.0000e-04\nEpoch 50/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8515 - loss: 0.2588 - val_accuracy: 0.8417 - val_loss: 0.4502 - learning_rate: 1.0000e-04\nRestoring model weights from the end of the best epoch: 48.\n\u001b[1m162/162\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 9ms/step\n\u001b[1m162/162\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step\nFold 3 - Accuracy: 84.54% - F1-Score: 0.8644 - AUC: 0.9817\nClassification Report:\n                 precision    recall  f1-score   support\n\n        Asthma       0.36      1.00      0.53         5\nBronchiectasis       0.42      0.99      0.59        78\n Bronchiolitis       0.48      0.81      0.60       120\n          COPD       0.99      0.86      0.92      4309\n       Healthy       0.47      0.76      0.58       241\n          LRTI       0.33      0.88      0.48        24\n     Pneumonia       0.52      0.86      0.64       214\n          URTI       0.47      0.66      0.55       182\n\n      accuracy                           0.85      5173\n     macro avg       0.50      0.85      0.61      5173\n  weighted avg       0.91      0.85      0.86      5173\n\nConfusion Matrix:\n [[   5    0    0    0    0    0    0    0]\n [   0   77    0    0    1    0    0    0]\n [   0    2   97    3    4    1    4    9]\n [   5   94   73 3688  171   22  159   97]\n [   2    5   15    4  182    9    4   20]\n [   0    0    0    0    2   21    1    0]\n [   0    1    4    7   10    1  183    8]\n [   2    3   15   11   19    9    3  120]]\n\n========== Starting Fold 4/5 ==========\nEpoch 1/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 30ms/step - accuracy: 0.2661 - loss: 2.0295 - val_accuracy: 0.1086 - val_loss: 1.8574 - learning_rate: 0.0010\nEpoch 2/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 30ms/step - accuracy: 0.2066 - loss: 1.5769 - val_accuracy: 0.1595 - val_loss: 2.0072 - learning_rate: 0.0010\nEpoch 3/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 30ms/step - accuracy: 0.2731 - loss: 1.4484 - val_accuracy: 0.3806 - val_loss: 1.4460 - learning_rate: 0.0010\nEpoch 4/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 31ms/step - accuracy: 0.3737 - loss: 1.4046 - val_accuracy: 0.4697 - val_loss: 1.2408 - learning_rate: 0.0010\nEpoch 5/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.4716 - loss: 1.1888 - val_accuracy: 0.6505 - val_loss: 0.9630 - learning_rate: 0.0010\nEpoch 6/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.5461 - loss: 1.0410 - val_accuracy: 0.6006 - val_loss: 1.0921 - learning_rate: 0.0010\nEpoch 7/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 30ms/step - accuracy: 0.5493 - loss: 1.0703 - val_accuracy: 0.5550 - val_loss: 1.1792 - learning_rate: 0.0010\nEpoch 8/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.5885 - loss: 1.0156 - val_accuracy: 0.6812 - val_loss: 0.8887 - learning_rate: 0.0010\nEpoch 9/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.6338 - loss: 0.8793 - val_accuracy: 0.6489 - val_loss: 0.9475 - learning_rate: 0.0010\nEpoch 10/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.6539 - loss: 0.8700 - val_accuracy: 0.6211 - val_loss: 1.0494 - learning_rate: 0.0010\nEpoch 11/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.6399 - loss: 0.9096 - val_accuracy: 0.5910 - val_loss: 1.1195 - learning_rate: 0.0010\nEpoch 12/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 30ms/step - accuracy: 0.6622 - loss: 0.7767 - val_accuracy: 0.7170 - val_loss: 0.7855 - learning_rate: 0.0010\nEpoch 13/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.6857 - loss: 0.7010 - val_accuracy: 0.6803 - val_loss: 0.8211 - learning_rate: 0.0010\nEpoch 14/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 30ms/step - accuracy: 0.6973 - loss: 0.6556 - val_accuracy: 0.7885 - val_loss: 0.5740 - learning_rate: 0.0010\nEpoch 15/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 31ms/step - accuracy: 0.7223 - loss: 0.6256 - val_accuracy: 0.6988 - val_loss: 0.8460 - learning_rate: 0.0010\nEpoch 16/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 31ms/step - accuracy: 0.7216 - loss: 0.6749 - val_accuracy: 0.6853 - val_loss: 0.8558 - learning_rate: 0.0010\nEpoch 17/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 31ms/step - accuracy: 0.7309 - loss: 0.6460 - val_accuracy: 0.7725 - val_loss: 0.6433 - learning_rate: 0.0010\nEpoch 18/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 31ms/step - accuracy: 0.7573 - loss: 0.5583 - val_accuracy: 0.7802 - val_loss: 0.6058 - learning_rate: 0.0010\nEpoch 19/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 29ms/step - accuracy: 0.7570 - loss: 0.5732\nEpoch 19: ReduceLROnPlateau reducing learning rate to 0.00010000000474974513.\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 31ms/step - accuracy: 0.7570 - loss: 0.5732 - val_accuracy: 0.7935 - val_loss: 0.5748 - learning_rate: 0.0010\nEpoch 20/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 31ms/step - accuracy: 0.7787 - loss: 0.4860 - val_accuracy: 0.8019 - val_loss: 0.5538 - learning_rate: 1.0000e-04\nEpoch 21/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 31ms/step - accuracy: 0.8093 - loss: 0.4038 - val_accuracy: 0.8136 - val_loss: 0.5213 - learning_rate: 1.0000e-04\nEpoch 22/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 31ms/step - accuracy: 0.8073 - loss: 0.3923 - val_accuracy: 0.8067 - val_loss: 0.5448 - learning_rate: 1.0000e-04\nEpoch 23/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 31ms/step - accuracy: 0.8086 - loss: 0.4068 - val_accuracy: 0.8084 - val_loss: 0.5469 - learning_rate: 1.0000e-04\nEpoch 24/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 30ms/step - accuracy: 0.8106 - loss: 0.3774 - val_accuracy: 0.8098 - val_loss: 0.5374 - learning_rate: 1.0000e-04\nEpoch 25/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 31ms/step - accuracy: 0.8104 - loss: 0.3889 - val_accuracy: 0.8065 - val_loss: 0.5496 - learning_rate: 1.0000e-04\nEpoch 26/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 31ms/step - accuracy: 0.8136 - loss: 0.3516 - val_accuracy: 0.8220 - val_loss: 0.5027 - learning_rate: 1.0000e-04\nEpoch 27/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 31ms/step - accuracy: 0.8269 - loss: 0.3371 - val_accuracy: 0.8237 - val_loss: 0.4949 - learning_rate: 1.0000e-04\nEpoch 28/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 31ms/step - accuracy: 0.8233 - loss: 0.3479 - val_accuracy: 0.8138 - val_loss: 0.5310 - learning_rate: 1.0000e-04\nEpoch 29/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 31ms/step - accuracy: 0.8159 - loss: 0.3473 - val_accuracy: 0.8212 - val_loss: 0.5077 - learning_rate: 1.0000e-04\nEpoch 30/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 31ms/step - accuracy: 0.8283 - loss: 0.3406 - val_accuracy: 0.8241 - val_loss: 0.4920 - learning_rate: 1.0000e-04\nEpoch 31/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 31ms/step - accuracy: 0.8268 - loss: 0.3562 - val_accuracy: 0.8235 - val_loss: 0.5096 - learning_rate: 1.0000e-04\nEpoch 32/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 32ms/step - accuracy: 0.8256 - loss: 0.3330 - val_accuracy: 0.8343 - val_loss: 0.4588 - learning_rate: 1.0000e-04\nEpoch 33/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 32ms/step - accuracy: 0.8351 - loss: 0.3068 - val_accuracy: 0.8297 - val_loss: 0.4756 - learning_rate: 1.0000e-04\nEpoch 34/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 31ms/step - accuracy: 0.8335 - loss: 0.3262 - val_accuracy: 0.8417 - val_loss: 0.4435 - learning_rate: 1.0000e-04\nEpoch 35/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.8397 - loss: 0.2993 - val_accuracy: 0.8293 - val_loss: 0.4778 - learning_rate: 1.0000e-04\nEpoch 36/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 30ms/step - accuracy: 0.8355 - loss: 0.3225 - val_accuracy: 0.8343 - val_loss: 0.4636 - learning_rate: 1.0000e-04\nEpoch 37/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.8393 - loss: 0.2936 - val_accuracy: 0.8301 - val_loss: 0.4755 - learning_rate: 1.0000e-04\nEpoch 38/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 31ms/step - accuracy: 0.8463 - loss: 0.2847 - val_accuracy: 0.8310 - val_loss: 0.4759 - learning_rate: 1.0000e-04\nEpoch 39/50\n\u001b[1m646/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 28ms/step - accuracy: 0.8471 - loss: 0.2855\nEpoch 39: ReduceLROnPlateau reducing learning rate to 1.0000000474974514e-05.\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 31ms/step - accuracy: 0.8471 - loss: 0.2855 - val_accuracy: 0.8376 - val_loss: 0.4579 - learning_rate: 1.0000e-04\nEpoch 40/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 30ms/step - accuracy: 0.8471 - loss: 0.2751 - val_accuracy: 0.8368 - val_loss: 0.4567 - learning_rate: 1.0000e-05\nEpoch 41/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 31ms/step - accuracy: 0.8482 - loss: 0.2762 - val_accuracy: 0.8355 - val_loss: 0.4611 - learning_rate: 1.0000e-05\nEpoch 42/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.8433 - loss: 0.2765 - val_accuracy: 0.8365 - val_loss: 0.4587 - learning_rate: 1.0000e-05\nEpoch 43/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 30ms/step - accuracy: 0.8457 - loss: 0.2823 - val_accuracy: 0.8372 - val_loss: 0.4548 - learning_rate: 1.0000e-05\nEpoch 44/50\n\u001b[1m646/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 28ms/step - accuracy: 0.8490 - loss: 0.2722\nEpoch 44: ReduceLROnPlateau reducing learning rate to 1e-05.\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 30ms/step - accuracy: 0.8490 - loss: 0.2722 - val_accuracy: 0.8382 - val_loss: 0.4545 - learning_rate: 1.0000e-05\nEpoch 44: early stopping\nRestoring model weights from the end of the best epoch: 34.\n\u001b[1m162/162\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 9ms/step\n\u001b[1m162/162\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step\nFold 4 - Accuracy: 84.17% - F1-Score: 0.8610 - AUC: 0.9820\nClassification Report:\n                 precision    recall  f1-score   support\n\n        Asthma       0.28      1.00      0.43         5\nBronchiectasis       0.44      0.86      0.58        78\n Bronchiolitis       0.44      0.76      0.56       120\n          COPD       0.99      0.85      0.92      4309\n       Healthy       0.52      0.71      0.60       241\n          LRTI       0.38      0.83      0.52        24\n     Pneumonia       0.46      0.93      0.61       214\n          URTI       0.48      0.71      0.57       182\n\n      accuracy                           0.84      5173\n     macro avg       0.50      0.83      0.60      5173\n  weighted avg       0.90      0.84      0.86      5173\n\nConfusion Matrix:\n [[   5    0    0    0    0    0    0    0]\n [   0   67    2    6    1    0    1    1]\n [   0    2   91    2    9    4    4    8]\n [  11   79   88 3671  133   12  215  100]\n [   2    1   13    9  171    5   12   28]\n [   0    0    0    1    0   20    0    3]\n [   0    1    3    4    4    0  199    3]\n [   0    2    9   13   12   12    4  130]]\n\n========== Starting Fold 5/5 ==========\nEpoch 1/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 29ms/step - accuracy: 0.2284 - loss: 2.0053 - val_accuracy: 0.2177 - val_loss: 1.7910 - learning_rate: 0.0010\nEpoch 2/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.2045 - loss: 1.6182 - val_accuracy: 0.1662 - val_loss: 1.9235 - learning_rate: 0.0010\nEpoch 3/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.2861 - loss: 1.5369 - val_accuracy: 0.2314 - val_loss: 1.7285 - learning_rate: 0.0010\nEpoch 4/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.4120 - loss: 1.2711 - val_accuracy: 0.6611 - val_loss: 1.0630 - learning_rate: 0.0010\nEpoch 5/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.4454 - loss: 1.2683 - val_accuracy: 0.6486 - val_loss: 1.0357 - learning_rate: 0.0010\nEpoch 6/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.5115 - loss: 1.1199 - val_accuracy: 0.6250 - val_loss: 1.0649 - learning_rate: 0.0010\nEpoch 7/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.5581 - loss: 1.0482 - val_accuracy: 0.6700 - val_loss: 0.9534 - learning_rate: 0.0010\nEpoch 8/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.5788 - loss: 0.9678 - val_accuracy: 0.6561 - val_loss: 0.9758 - learning_rate: 0.0010\nEpoch 9/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.5933 - loss: 0.9646 - val_accuracy: 0.6321 - val_loss: 1.0433 - learning_rate: 0.0010\nEpoch 10/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 30ms/step - accuracy: 0.6230 - loss: 0.8865 - val_accuracy: 0.6248 - val_loss: 1.0324 - learning_rate: 0.0010\nEpoch 11/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.6272 - loss: 0.8810 - val_accuracy: 0.6489 - val_loss: 0.9731 - learning_rate: 0.0010\nEpoch 12/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.6394 - loss: 0.7994 - val_accuracy: 0.6563 - val_loss: 0.9480 - learning_rate: 0.0010\nEpoch 13/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.6604 - loss: 0.7284 - val_accuracy: 0.6888 - val_loss: 0.8746 - learning_rate: 0.0010\nEpoch 14/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.6548 - loss: 0.7414 - val_accuracy: 0.6882 - val_loss: 0.8259 - learning_rate: 0.0010\nEpoch 15/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.6741 - loss: 0.6941 - val_accuracy: 0.6366 - val_loss: 0.9723 - learning_rate: 0.0010\nEpoch 16/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.6721 - loss: 0.6939 - val_accuracy: 0.6980 - val_loss: 0.8314 - learning_rate: 0.0010\nEpoch 17/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.7061 - loss: 0.6356 - val_accuracy: 0.7518 - val_loss: 0.7040 - learning_rate: 0.0010\nEpoch 18/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7193 - loss: 0.5866 - val_accuracy: 0.6917 - val_loss: 0.8079 - learning_rate: 0.0010\nEpoch 19/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.6753 - loss: 0.7258 - val_accuracy: 0.6851 - val_loss: 0.8540 - learning_rate: 0.0010\nEpoch 20/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.7363 - loss: 0.5538 - val_accuracy: 0.7717 - val_loss: 0.6397 - learning_rate: 0.0010\nEpoch 21/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7526 - loss: 0.5200 - val_accuracy: 0.7725 - val_loss: 0.6349 - learning_rate: 0.0010\nEpoch 22/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 30ms/step - accuracy: 0.7162 - loss: 0.6961 - val_accuracy: 0.7023 - val_loss: 0.8824 - learning_rate: 0.0010\nEpoch 23/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.7245 - loss: 0.5691 - val_accuracy: 0.7578 - val_loss: 0.6735 - learning_rate: 0.0010\nEpoch 24/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 30ms/step - accuracy: 0.7485 - loss: 0.5191 - val_accuracy: 0.7359 - val_loss: 0.7000 - learning_rate: 0.0010\nEpoch 25/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.7532 - loss: 0.4988 - val_accuracy: 0.7837 - val_loss: 0.5868 - learning_rate: 0.0010\nEpoch 26/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.7723 - loss: 0.4493 - val_accuracy: 0.7715 - val_loss: 0.6329 - learning_rate: 0.0010\nEpoch 27/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.7673 - loss: 0.4509 - val_accuracy: 0.7715 - val_loss: 0.6572 - learning_rate: 0.0010\nEpoch 28/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.7585 - loss: 0.4572 - val_accuracy: 0.7899 - val_loss: 0.5904 - learning_rate: 0.0010\nEpoch 29/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.7821 - loss: 0.4102 - val_accuracy: 0.7493 - val_loss: 0.6986 - learning_rate: 0.0010\nEpoch 30/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 28ms/step - accuracy: 0.7936 - loss: 0.3964\nEpoch 30: ReduceLROnPlateau reducing learning rate to 0.00010000000474974513.\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.7935 - loss: 0.3965 - val_accuracy: 0.7876 - val_loss: 0.5905 - learning_rate: 0.0010\nEpoch 31/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.7872 - loss: 0.3893 - val_accuracy: 0.7984 - val_loss: 0.5617 - learning_rate: 1.0000e-04\nEpoch 32/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.8002 - loss: 0.3594 - val_accuracy: 0.7986 - val_loss: 0.5716 - learning_rate: 1.0000e-04\nEpoch 33/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8071 - loss: 0.3257 - val_accuracy: 0.8164 - val_loss: 0.5167 - learning_rate: 1.0000e-04\nEpoch 34/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8233 - loss: 0.2976 - val_accuracy: 0.8187 - val_loss: 0.5064 - learning_rate: 1.0000e-04\nEpoch 35/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.8336 - loss: 0.2881 - val_accuracy: 0.8133 - val_loss: 0.5267 - learning_rate: 1.0000e-04\nEpoch 36/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8231 - loss: 0.2969 - val_accuracy: 0.8334 - val_loss: 0.4763 - learning_rate: 1.0000e-04\nEpoch 37/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8382 - loss: 0.2647 - val_accuracy: 0.8256 - val_loss: 0.4944 - learning_rate: 1.0000e-04\nEpoch 38/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8336 - loss: 0.2664 - val_accuracy: 0.8293 - val_loss: 0.4843 - learning_rate: 1.0000e-04\nEpoch 39/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.8420 - loss: 0.2359 - val_accuracy: 0.8270 - val_loss: 0.4802 - learning_rate: 1.0000e-04\nEpoch 40/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8429 - loss: 0.2485 - val_accuracy: 0.8268 - val_loss: 0.4864 - learning_rate: 1.0000e-04\nEpoch 41/50\n\u001b[1m646/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 27ms/step - accuracy: 0.8427 - loss: 0.2432\nEpoch 41: ReduceLROnPlateau reducing learning rate to 1.0000000474974514e-05.\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8427 - loss: 0.2432 - val_accuracy: 0.8299 - val_loss: 0.4801 - learning_rate: 1.0000e-04\nEpoch 42/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.8490 - loss: 0.2289 - val_accuracy: 0.8328 - val_loss: 0.4729 - learning_rate: 1.0000e-05\nEpoch 43/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8437 - loss: 0.2306 - val_accuracy: 0.8334 - val_loss: 0.4676 - learning_rate: 1.0000e-05\nEpoch 44/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8486 - loss: 0.2230 - val_accuracy: 0.8320 - val_loss: 0.4711 - learning_rate: 1.0000e-05\nEpoch 45/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 30ms/step - accuracy: 0.8490 - loss: 0.2342 - val_accuracy: 0.8341 - val_loss: 0.4654 - learning_rate: 1.0000e-05\nEpoch 46/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8529 - loss: 0.2248 - val_accuracy: 0.8355 - val_loss: 0.4643 - learning_rate: 1.0000e-05\nEpoch 47/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8537 - loss: 0.2267 - val_accuracy: 0.8367 - val_loss: 0.4628 - learning_rate: 1.0000e-05\nEpoch 48/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8496 - loss: 0.2217 - val_accuracy: 0.8368 - val_loss: 0.4635 - learning_rate: 1.0000e-05\nEpoch 49/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8530 - loss: 0.2265 - val_accuracy: 0.8361 - val_loss: 0.4623 - learning_rate: 1.0000e-05\nEpoch 50/50\n\u001b[1m647/647\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m19s\u001b[0m 29ms/step - accuracy: 0.8495 - loss: 0.2257 - val_accuracy: 0.8384 - val_loss: 0.4550 - learning_rate: 1.0000e-05\nRestoring model weights from the end of the best epoch: 50.\n\u001b[1m162/162\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 10ms/step\n\u001b[1m162/162\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step\nFold 5 - Accuracy: 83.84% - F1-Score: 0.8583 - AUC: 0.9823\nClassification Report:\n                 precision    recall  f1-score   support\n\n        Asthma       0.19      0.80      0.31         5\nBronchiectasis       0.42      0.91      0.58        78\n Bronchiolitis       0.45      0.73      0.56       120\n          COPD       0.99      0.84      0.91      4309\n       Healthy       0.45      0.79      0.57       241\n          LRTI       0.41      0.92      0.56        24\n     Pneumonia       0.50      0.85      0.63       214\n          URTI       0.51      0.76      0.61       182\n\n      accuracy                           0.84      5173\n     macro avg       0.49      0.83      0.59      5173\n  weighted avg       0.90      0.84      0.86      5173\n\nConfusion Matrix:\n [[   4    0    0    0    1    0    0    0]\n [   0   71    1    3    2    0    0    1]\n [   0    4   88    7    8    1    3    9]\n [  13   89   84 3641  198   18  164  102]\n [   3    1   12    9  191    5    9   11]\n [   0    0    0    0    0   22    0    2]\n [   0    3    3   14    7    0  182    5]\n [   1    0    6    6   19    8    4  138]]\n\u001b[1m54/54\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step\n\u001b[1m54/54\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step\n\n================= Final Evaluation =================\nValidation Accuracy: 85.80%\nValidation F1-Score: 0.8738\nValidation AUC: 0.9799\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":""},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"!pip install torch panns-inference\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Input, LSTM, Dense, Conv1D, MaxPooling1D, Dropout, Reshape\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score, roc_auc_score, f1_score\nfrom sklearn.model_selection import StratifiedKFold\nimport librosa as lb\nimport matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Load Data\ntrain = pd.read_csv('../input/part-2-handel-imbalance-creating-spectrogram/train.csv')\nval = pd.read_csv('../input/part-2-handel-imbalance-creating-spectrogram/val.csv')\nytrain = train['disease']\nyval = val['disease']","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Label Encoding\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nytrain = le.fit_transform(ytrain).astype(np.int64)\nyval = le.transform(yval).astype(np.int64)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Data Augmentation Function\ndef augment_audio(waveform, sr):\n    \"\"\"Apply basic audio augmentations.\"\"\"\n    waveforms = [\n        waveform,\n        lb.effects.pitch_shift(waveform, sr=sr, n_steps=2),\n        lb.effects.time_stretch(waveform, rate=0.8),\n        lb.effects.time_stretch(waveform, rate=1.2),\n        waveform + 0.005 * np.random.randn(len(waveform))  # Add Gaussian noise\n    ]\n    return waveforms","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Extract MFCCs as Features\ndef extract_features(audio_path, augment=True):\n    waveform, sr = lb.load(audio_path, sr=16000, mono=True)\n    if augment:\n        waveforms = augment_audio(waveform, sr)\n    else:\n        waveforms = [waveform]\n    \n    features = []\n    for wf in waveforms:\n        mfcc = lb.feature.mfcc(y=wf, sr=sr, n_mfcc=40)\n        features.append(np.mean(mfcc, axis=1))  # Aggregate MFCCs\n    return features","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Process Dataset\nroot = '../input/part-1-preprocessing/processed_audio_files/'\ndef process_data(data, augment=True):\n    features, labels = [], []\n    for _, row in data.iterrows():\n        path = root + row['filename']\n        mfcc_features = extract_features(path, augment)\n        features.extend(mfcc_features)\n        labels.extend([row['disease']] * len(mfcc_features))\n    return np.array(features, dtype=np.float32), np.array(labels)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Extract features for train and validation\nX_train, y_train = process_data(train, augment=True)\nX_val, y_val = process_data(val, augment=False)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Class Weights for Imbalanced Data\nfrom sklearn.utils.class_weight import compute_class_weight\nclass_weights = compute_class_weight(\n    class_weight=\"balanced\",\n    classes=np.unique(y_train),\n    y=y_train\n)\nclass_weights_dict = {i: np.float32(weight) for i, weight in enumerate(class_weights)}","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# CNN-LSTM Model\ndef create_cnn_lstm_model(input_dim):\n    inputs = Input(shape=(input_dim,))\n    x = Reshape((input_dim, 1))(inputs)  # Add channel dimension\n    x = Conv1D(64, kernel_size=3, activation='relu')(x)\n    x = MaxPooling1D(pool_size=2)(x)\n    x = LSTM(128, return_sequences=False, dropout=0.3)(x)\n    x = Dense(64, activation='relu')(x)\n    outputs = Dense(len(np.unique(y_train)), activation='softmax')(x)\n    model = Model(inputs, outputs)\n    model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n    return model","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# K-Fold Cross Validation\nn_splits = 5\nskf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=42)\nfold_no = 1\nresults = []","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"for train_index, val_index in skf.split(X_train, y_train):\n    print(f\"\\n========== Starting Fold {fold_no}/{n_splits} ==========\")\n    \n    # Split Data\n    X_fold_train, X_fold_val = X_train[train_index], X_train[val_index]\n    y_fold_train, y_fold_val = y_train[train_index], y_train[val_index]\n\n    # Encode labels to integers\n    y_fold_train = le.transform(y_fold_train).astype(np.int64) \n    y_fold_val = le.transform(y_fold_val).astype(np.int64) \n\n    # Build Model\n    model = create_cnn_lstm_model(X_train.shape[1])\n    \n    # Callbacks\n    callbacks = [\n        tf.keras.callbacks.EarlyStopping(patience=10, restore_best_weights=True, verbose=1),\n        tf.keras.callbacks.ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=5, min_lr=1e-5, verbose=1)\n    ]\n    \n    # Train Model\n    history = model.fit(\n        X_fold_train, y_fold_train,\n        validation_data=(X_fold_val, y_fold_val),\n        epochs=50,\n        batch_size=32,\n        class_weight=class_weights_dict,\n        callbacks=callbacks,\n        verbose=1\n    )\n    \n    # Evaluate Model\n    predictions = np.argmax(model.predict(X_fold_val), axis=1)\n    acc = accuracy_score(y_fold_val, predictions)\n    f1 = f1_score(y_fold_val, predictions, average='weighted')\n    auc = roc_auc_score(y_fold_val, model.predict(X_fold_val), multi_class='ovr')\n    report = classification_report(y_fold_val, predictions, target_names=le.classes_)\n    conf_matrix = confusion_matrix(y_fold_val, predictions)\n    \n    print(f\"Fold {fold_no} - Accuracy: {acc * 100:.2f}% - F1-Score: {f1:.4f} - AUC: {auc:.4f}\")\n    print(\"Classification Report:\\n\", report)\n    print(\"Confusion Matrix:\\n\", conf_matrix)\n    \n    # Append Results\n    results.append(acc * 100)\n    fold_no += 1","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Evaluate on Held-Out Validation Set\nfinal_predictions = np.argmax(model.predict(X_val), axis=1)\nfinal_acc = accuracy_score(yval, final_predictions)\nfinal_f1 = f1_score(yval, final_predictions, average='weighted')\nfinal_auc = roc_auc_score(yval, model.predict(X_val), multi_class='ovr')\n\n# Final Metrics\nprint(\"\\n================= Final Evaluation =================\")\nprint(f\"Validation Accuracy: {final_acc * 100:.2f}%\")\nprint(f\"Validation F1-Score: {final_f1:.4f}\")\nprint(f\"Validation AUC: {final_auc:.4f}\")\n\n# Plot Confusion Matrix for Validation Set\nconf_matrix_val = confusion_matrix(yval, final_predictions)\nplt.figure(figsize=(8, 6))\nsns.heatmap(conf_matrix_val, annot=True, fmt=\"d\", cmap=\"Blues\", xticklabels=le.classes_, yticklabels=le.classes_)\nplt.title('Validation Set Confusion Matrix')\nplt.xlabel('Predicted Labels')\nplt.ylabel('True Labels')\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}